#!/bin/bash
################################################################################
######################## Microway Cluster Management Software (MCMS) for OpenHPC
################################################################################
#
# Copyright (c) 2015 by Microway, Inc.
#
# This file is part of Microway Cluster Management Software (MCMS) for OpenHPC.
#
#    MCMS for OpenHPC is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    MCMS for OpenHPC is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with MCMS.  If not, see <http://www.gnu.org/licenses/>
#
################################################################################


################################################################################
#
# This script is run from the front-end SLURM server when powered-up nodes are
# idle and just wasting power. This script is run as the SlurmUser, not as root.
#
################################################################################


NODELIST="$1"


# Exit if this script isn't actually running within a SLURM context
if [[ -z "$SLURM_CONF" ]]; then
    echo "Do not run this script manually - it is used by SLURM"
    exit 1
fi


logger "SLURM is suspending node(s): $NODELIST"


################################################################################
# Parse the short-form node list information from SLURM. scontrol can do this,
# but we should try not to shell out. Example: node[1,4-7,18]
#
full_node_list=( )

nodename_prefix=${NODELIST%%\[*}
nodename_postfix=${NODELIST##*\]}
short_list=${NODELIST##*\[}
short_list=${short_list%%\]*}

# If the 'node list' is a single node, we're done
if [[ "$nodename_prefix" == "$nodename_postfix" ]]; then
    full_node_list[0]=$NODELIST
else
    # Break down the comma-separated list
    OLD_IFS=$IFS
    IFS=,
    for item in $short_list; do
        range_begin=${item%%-*}
        range_end=${item##*-}

        # Add in each node in the specified node range (even if it's just one node)
        for (( i=$range_begin; i<$(($range_end+1)); i++ )); do
            full_node_list[${#full_node_list[@]}]=${nodename_prefix}${i}${nodename_postfix}
        done
    done
    IFS=$OLD_IFS
fi
################################################################################


################################################################################
# Power off the nodes
#

# Specify arguments to pass to SSH
# Slurm will use a private SSH key to login as root on each compute node.
SSH_EXECUTABLE=${SSH_EXECUTABLE:-/usr/bin/ssh}
ssh_arguments="-i /var/spool/slurmd/.ssh/.poweroff-ssh-key -2 -a -x -lroot"

# Power off all idle nodes
for (( i=0; i<${#full_node_list[@]}; i++ )); do
    $SSH_EXECUTABLE $ssh_arguments ${full_node_list[$i]} /sbin/poweroff
    ssh_retval=$?

    if [[ $ssh_retval -gt 0 ]]; then
        exit $ssh_retval
    fi
done
################################################################################


exit 0

