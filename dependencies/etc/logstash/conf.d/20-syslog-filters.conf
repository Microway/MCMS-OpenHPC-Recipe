################################################################################
######################## Microway Cluster Management Software (MCMS) for OpenHPC
################################################################################
#
# Copyright (c) 2015-2016 by Microway, Inc.
#
# This file is part of Microway Cluster Management Software (MCMS) for OpenHPC.
#
#    MCMS for OpenHPC is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    MCMS for OpenHPC is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with MCMS.  If not, see <http://www.gnu.org/licenses/>
#
################################################################################


# MCMS tag documentation
# ========================
#
# The following event tags are interpreted and monitored by MCMS:
#
#  * user_account_event     creation or deletion of a user
#  * group_account_event    creation or deletion of a group
#
#  * remote_login_event     a user logged in from a remote location
#  * local_login_event      a user logged in from a local console
#  * remote_logout_event    a user logged out from a remote location
#  * local_logout_event     a user logged out from a local console
#
#  * auth_failure_event     security issue: a user failed to authenticate
#
#  * config_error_event     a configuration issue is causing errors
#
#  * hardware_event         an event occurred in the hardware
#
#
#
# When something must be reported, assign a value to the field "report".
# The following values are interpreted and escalated by MCMS:
#
#  * emergency              The system is no longer functioning or is unusable.
#                           Most likely, all staff on call should be alerted.
#                           Example: Users are unable to read /home
#
#  * alert                  A major issue has occurred which requires immediate
#                           attention. A staff member should be alerted.
#                           Example: the primary network uplink is down
#
#  * critical               An issue requires immediate attention, but is
#                           related to a secondary system.
#                           Example: the secondary network uplink is down
#
#  * error                  A non-urgent error has occurred. An administrator
#                           will need to take action, but can do so during the
#                           next business day.
#                           Example: one compute node has gone down
#
#  * warning                Warn of a condition which may result in an error if
#                           action is not taken soon - not urgent.
#                           Example: a filesystem is nearing 90% full
#
#  * notice                 An unusual event has occurred, but it was not an
#                           error. A message should be sent to administrators
#                           for follow-up.
#
#  * informational          System is operating normally - no action required.
#                           Often harvested for reporting or measuring purposes.
#
#  * debug                  Not used during normal operations. This message
#                           could be useful to developers when debugging.
#
#
# These severity levels are the same as those used by syslog:
#   http://en.wikipedia.org/wiki/Syslog#Severity_levels


filter {
  if [type] == "syslog" or [type] == "cron" or [type] == "mail" or [type] == "secure" {
    mutate { add_field => ["format", "syslog"] }

    # Feb 23 04:48:16 head slurmctld[3166]: completing job 36
    grok {
      overwrite => "message"
      # We're not saving the hostname - it's grabbed by logstash-forwarder
      match => [
        "message", "^(?:<%{POSINT:syslog_pri}>)?%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST} (?:%{SYSLOGPROG}: )?%{GREEDYDATA:message}"
      ]
    }
    syslog_pri { }
    date {
      match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
    }
  }


  if [type] == "audit" {
    # type=USER_END msg=audit(1392782461.768:2961): user pid=75557 uid=0 auid=0 ses=447 msg='op=PAM:session_close acct="root" exe="/usr/sbin/crond" hostname=? addr=? terminal=cron res=success'
    grok {
      overwrite => "message"
      match => [ "message", "type=%{WORD:audit_type} msg=audit\(%{BASE10NUM:timestamp}:%{POSINT:audit_id}\): %{GREEDYDATA:message}" ]
      add_tag => [ "grokked" ]
    }
    date {
      match => [ "timestamp", "UNIX_MS" ]
    }
  }


  else if [type] == "apache-access" {
    # 10.0.0.3 - - [16/Feb/2014:05:22:51 -0500] "GET /WW/vnfs?hwaddr=00:25:90:6b:bb:5c HTTP/1.1" 500 620 "-" "Wget"
    grok {
      overwrite => "message"
      match => [ "message", "%{COMBINEDAPACHELOG}" ]
      add_tag => [ "grokked" ]
    }
  }


  else if [type] == "apache-error" {
    # [Sun Feb 16 09:32:44 2014] [notice] Apache/2.2.15 (Unix) DAV/2 PHP/5.3.3 mod_perl/2.0.4 Perl/v5.10.1 configured -- resuming normal operations
    #
    # [Sun Feb 16 03:22:27 2014] [error] [client 127.0.0.1] PHP Warning:  date(): It is not safe to rely on the system's timezone settings.
    grok {
      overwrite => "message"
      match => [
        "message", "\[%{GREEDYDATA:timestamp}\] \[%{WORD:loglevel}\](?: \[%{WORD:originator} %{IP:remote_ip}\])? %{GREEDYDATA:message}"
      ]
      add_tag => [ "grokked" ]
    }
    date {
      match => [ "timestamp", "EEE MMM dd HH:mm:ss YYYY" ]
    }
  }


  else if [type] == "cron" {
    # Uses syslog format, so timestamp/host/program/pid were parsed above

    # (root) CMD (run-parts /etc/cron.hourly)
    # run-parts(/etc/cron.hourly)[12910]: starting 0anacron
    grok {
      overwrite => "message"
      match => [
        "message", "\(%{USERNAME:user}\) %{CRON_ACTION:action} \(%{DATA:message}\)",
        "message", "%{PROG:program}\(%{UNIXPATH:cron_stage}\)(?:\[%{POSINT:pid}\])?: %{GREEDYDATA:message}"
      ]
      add_tag => [ "grokked" ]
    }
  }


  # else if [type] == "mail" {
      # Uses syslog format, so timestamp/host/program/pid were parsed above
  # }


  # else if [type] == "mcelog" {
  #
  # }


  # else if [type] == "mysqld" {
  #
  # }


  # else if [type] == "opensm" {
  #
  # }


  else if [type] == "secure" {
    # Uses syslog format, so timestamp/host/program/pid were parsed above

    if [program] == "groupadd" {
      # new group: name=elasticsearch, GID=494
      grok {
        overwrite => "message"
        match => [ "message", "new group: name=%{WORD:group_name}, GID=%{NONNEGINT:gid}" ]
        add_tag => [ "group_account_event", "grokked" ]
      }
      # group added to /etc/group: name=elasticsearch, GID=494
      grok {
        overwrite => "message"
        match => [ "message", "group added to %{UNIXPATH:group_file} name=%{WORD:group_name}(?:, GID=%{NONNEGINT:gid})?" ]
        add_tag => [ "grokked" ]
      }
    }
    else if [program] == "groupdel" {
      # group 'testgroup' removed
      grok {
        overwrite => "message"
        match => [ "message", "group '%{WORD:group_name}' removed" ]
        add_tag => [ "group_account_event", "grokked" ]
      }
      # group 'testgroup' removed from /etc/group
      grok {
        overwrite => "message"
        match => [ "message", "group '%{WORD:group_name}' removed from %{UNIXPATH:group_file}" ]
        add_tag => [ "grokked" ]
      }
    }
    else if [program] == "useradd" {
      # new user: name=logstash, UID=494, GID=493, home=/opt/logstash, shell=/sbin/nologin
      grok {
        overwrite => "message"
        # Careful below: *nix PATHs can include commas
        match => [ "message", "new user: name=%{WORD:username}, UID=%{NONNEGINT:uid}, GID=%{NONNEGINT:gid}, home=%{GREEDYDATA:home_dir}, shell=%{UNIXPATH:shell}" ]
        add_tag => [ "user_account_event", "grokked" ]
      }
      # add 'eliot' to group 'benchmark'
      # add 'eliot' to shadow group 'benchmark'
      grok {
        overwrite => "message"
        match => [ "message", "add '%{WORD:username}' to(?: %{WORD:group_file})? group '%{WORD:group_name}'" ]
        add_tag => [ "grokked" ]
      }
    }
    else if [program] == "userdel" {
      # delete user 'test'
      grok {
        overwrite => "message"
        match => [ "message", "delete user '%{WORD:username}'" ]
        add_tag => [ "user_account_event", "grokked" ]
      }
      # TODO: removed group 'slurm' owned by 'slurm'
    }

    # else if [program] == "slurm" {
    #
    # }

    # else if [program] == "slurmctld" {
    #
    # }

    else if [program] == "sshd" {
      if "grokked" not in [tags] {
        # Accepted password for tiwa from 72.83.55.11 port 58019 ssh2
        grok {
          overwrite => "message"
          match => [ "message", "Accepted %{WORD:auth_method} for %{USERNAME:user} from %{IPORHOST:remote_ip} port %{POSINT:remote_port} %{WORD:remote_utility}" ]
          add_tag => [ "remote_login_event", "grokked" ]
        }
      }

      if "grokked" not in [tags] {
        # pam_unix(sshd:session): session opened for user coma by (uid=0)
        grok {
          overwrite => "message"
          match => [ "message", "%{WORD:pam_service}\(%{NOTSPACE:session_type}\): session opened for user %{USERNAME:username} by \(uid=%{NONNEGINT:uid}\)" ]
          add_tag => [ "remote_login_event", "grokked" ]
        }
      }

      if "grokked" not in [tags] {
        # pam_lastlog(sshd:session): unable to open /var/log/lastlog: No such file or directory
        # lastlog_openseek: Couldn't stat /var/log/lastlog: No such file or directory
        grok {
          overwrite => "message"
          match => [ "message", "%{NOTSPACE:calling_function}: (unable to open|Couldn't stat) %{GREEDYDATA:missing_file}: No such file or directory" ]
          add_tag => [ "config_error_event", "grokked" ]
        }
      }

      if "grokked" not in [tags] {
        # subsystem request for sftp
        grok {
          match => [ "message", "subsystem request for %{WORD:subsystem_type}" ]
          add_tag => [ "remote_login_event", "grokked" ]
        }
      }

      if "grokked" not in [tags] {
        # Failed password for eliot from 76.19.216.82 port 40415 ssh2
        # Failed password for invalid user cordm from 50.159.20.141 port 51799 ssh2
        grok {
          overwrite => "message"
          match => [ "message", "Failed %{WORD:auth_method} for (?:%{WORD:user_status} user )?%{USERNAME:username} from %{IPORHOST:remote_ip} port %{POSINT:remote_port} %{WORD:remote_utility}" ]
          add_tag => [ "auth_failure_event", "invalid_password", "grokked" ]
        }
      }

      if "grokked" not in [tags] {
        # pam_unix(sshd:auth): check pass; user unknown
        grok {
          match => [ "message", "%{WORD:pam_service}\(%{NOTSPACE:session_type}\): check pass; user unknown" ]
          add_tag => [ "auth_failure_event", "invalid_username", "grokked" ]
        }
      }

      if "grokked" not in [tags] {
        # input_userauth_request: invalid user cordm
        grok {
          match => [ "message", "%{WORD:auth_request}: invalid user %{USERNAME:username}" ]
          add_tag => [ "auth_failure_event", "invalid_username", "grokked" ]
        }
      }

      if "grokked" not in [tags] {
        # Invalid user cordm from 50.159.20.141
        grok {
          match => [ "message", "Invalid user %{USERNAME:username} from %{IPORHOST:remote_ip}" ]
          add_tag => [ "auth_failure_event", "invalid_username", "grokked" ]
        }
      }

      if "grokked" not in [tags] {
        # pam_succeed_if(sshd:auth): error retrieving information about user cordm
        grok {
          match => [ "message", "%{WORD:pam_service}\(%{NOTSPACE:session_type}\): error retrieving information about user %{USERNAME:username}" ]
          add_tag => [ "auth_failure_event", "invalid_username", "grokked" ]
        }
      }

      if "grokked" not in [tags] {
        # pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=10.50.1.1  user=root
        # pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=c-50-159-20-141.hsd1.wa.comcast.net
        grok {
          overwrite => "message"
          match => [ "message", "%{WORD:pam_service}\(%{NOTSPACE:session_type}\): authentication failure; logname=(?:%{WORD:logname})? uid=%{NONNEGINT:uid} euid=%{NONNEGINT:euid} tty=%{WORD:tty} ruser=(?:%{USERNAME:remote_user})? rhost=%{IPORHOST:remote_ip}(?:%{SPACE}user=%{USERNAME:username})?" ]
          add_tag => [ "auth_failure_event", "grokked" ]
        }
      }

      if "grokked" not in [tags] {
        # PAM 1 more authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=c-50-159-20-141.hsd1.wa.comcast.net
        # PAM 2 more authentication failures; logname= uid=0 euid=0 tty=ssh ruser= rhost=c-76-19-216-82.hsd1.ma.comcast.net  user=eliot
        grok {
          overwrite => "message"
          match => [ "message", "PAM %{POSINT:failure_count} more authentication failure(?:s)?; logname=(?:%{WORD:logname})? uid=%{NONNEGINT:uid} euid=%{NONNEGINT:euid} tty=%{WORD:tty} ruser=(?:%{USERNAME:remote_user})? rhost=%{IPORHOST:remote_ip}(?:%{SPACE}user=%{USERNAME:username})?" ]
          add_tag => [ "auth_failure_event", "grokked" ]
        }
      }

      if "grokked" not in [tags] {
        # Connection closed by 10.0.0.4
        grok {
          match => [ "message", "Connection closed by %{IPORHOST:remote_ip}" ]
          add_tag => [ "remote_logout_event", "grokked" ]
        }
      }

      if "grokked" not in [tags] {
        # pam_unix(sshd:session): session closed for user coma
        grok {
          overwrite => "message"
          match => [ "message", "%{WORD:pam_service}\(%{NOTSPACE:session_type}\): session closed for user %{USERNAME:username}" ]
          add_tag => [ "remote_logout_event", "grokked" ]
        }
      }

      if "grokked" not in [tags] {
        # Received disconnect from 10.0.0.254: 11: disconnected by user
        grok {
          match => [ "message", "Received disconnect from %{IPORHOST:remote_ip}" ]
          add_tag => [ "remote_logout_event", "grokked" ]
        }
      }
    }

    else if [program] == "sudo" {
      # pam_unix(sudo:auth): authentication failure; logname=root uid=500 euid=0 tty=/dev/pts/5 ruser=eliot rhost= user=eliot
      # eliot : user NOT in sudoers ; TTY=pts/5 ; PWD=/home/eliot ; USER=root ; COMMAND=/bin/ls /
      grok {
          overwrite => "message"
          match => [
            "message", "%{WORD:pam_service}\(%{NOTSPACE:session_type}\): authentication failure; logname=%{USERNAME:logname} uid=%{NONNEGINT:uid} euid=%{NONNEGINT:euid} tty=%{TTY:tty} ruser=%{USERNAME:remote_username} rhost=(?:%{IPORHOST:remote_ip})? user=%{USERNAME:username}",
            "message", "%{USERNAME:username} : user NOT in sudoers ; TTY=%{GREEDYDATA:tty} ; PWD=%{UNIXPATH:pwd} ; USER=%{USERNAME:sudo_username} ; COMMAND=%{GREEDYDATA:command}"
          ]
          add_tag => [ "auth_failure_event", "grokked" ]
      }
    }
  }

  # else if [type] == "spooler" {
  #
  # }

  # else if [type] == "yum" {
  #
  # }


  ################################################################
  # Mark type of host (compute node events are less critical)
  ################################################################
  if [host] =~ /^node.+/ {
    mutate { add_field => ["node_type", "compute"] }
  }
  else if [host] =~ /^storage.+/ {
    mutate { add_field => ["node_type", "storage"] }
  }
  else {
    mutate { add_field => ["node_type", "management"] }
  }


  ################################################################
  # Lookup Geolocation data for remote hosts
  ################################################################
  if [remote_ip] =~ /(.+)/ {
    # Make sure we didn't pick up a hostname instead of an IP.
    # If so, overwrite the hostname with the IP address.
    if ! ([remote_ip] =~ /[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/) {
      dns {
        action => "replace"
        resolve => "remote_ip"
      }
    }

    geoip {
      source => "remote_ip"
      target => "geoip"
      database => "/etc/logstash/GeoLiteCity.dat"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    mutate {
      convert => [ "[geoip][coordinates]", "float"]
    }
  }


  ################################################################
  # Mark hardware events (likely to be more critical) if they
  # have not already been assigned a severity level.
  ################################################################
  if ! ([report] =~ /(.+)/) {
    if [type] == "mcelog" {
      mutate { add_field => ["report", "error"] }
    }
    else if [type] == "syslog" {
      if [program] =~ /.*ipmiseld/ {
        mutate { add_field => ["report", "error"] }
      }
    }
  }


  ################################################################
  # Set up events which will be forwarded to Shinken/Nagios
  ################################################################
  if [report] =~ /(.+)/ {
    mutate {
      add_field => [ "nagios_host", "%{host}",
                     "nagios_service", "%{program}" ]
    }
  }


  ################################################################
  # Clean up after ourselves - remove any internal tags/fields
  ################################################################
  if [format] =~ /(.+)/ {
    mutate { remove_field => ["format"] }
  }
  if "_grokparsefailure" in [tags] and "grokked" in [tags] {
    mutate { remove_tag => ["_grokparsefailure"] }
  }
}


output {
  ################################################################
  # Optionally, elect to forward items to Graphite/Statsd
  ################################################################
  # if "hardware_event" in [tags] or "user_account_event" in [tags] or "group_account_event" in [tags] {
  #   graphite {
  #     host => "10.0.0.254"
  #   }
  #   statsd { }
  # }


  ################################################################
  # Optionally, elect to forward items to Shinken/Nagios
  ################################################################
  # if [report] =~ /(.+)/ {
  #   nagios { }
  # }
}

