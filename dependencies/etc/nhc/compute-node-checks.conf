################################################################################
######################## Microway Cluster Management Software (MCMS) for OpenHPC
################################################################################
#
# Copyright (c) 2015-2016 by Microway, Inc.
#
# This file is part of Microway Cluster Management Software (MCMS) for OpenHPC.
#
#    MCMS for OpenHPC is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    MCMS for OpenHPC is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with MCMS.  If not, see <http://www.gnu.org/licenses/>
#
################################################################################


################################################################################
#
# Node Health Check (NHC) configuration file
#
# Checks to be run on compute nodes only
#
# These tests are typically run by the batch scheduler (e.g., Torque, SLURM) to
# ensure that the compute nodes are in a healthy state. A variety of checks are
# executed, including hardware health, software health and filesystem health.
#
# All tests in this file should run very fast and should not use system
# resources as they will be running at the same time as compute jobs. Tests must
# not access any network filesystems, as they can hang. Longer-running health
# checks and filesystem checks should be put in one of the following files:
#
#   compute-node-checks_intense.conf        (resource-intensive checks)
#   compute-node-checks_blocking-io.conf    (checks which could lock up)
#
#
# Lines are in the form "<hostmask>||<check>"
# Hostmask is a glob, /regexp/, or {noderange}
# Comments begin with '#'
#
################################################################################


#######################################################################
###
### NHC Configuration Variables
###

# If you are having trouble with NHC, uncomment the following lines
# to get a full verbose log of the situation:
#
# *  || export VERBOSE=1
# *  || export DEBUG=1

# Uncomment to let nodes continue running jobs (even when problems are found)
# *  || export MARK_OFFLINE=0

# Uncomment to run ALL checks (instead of exiting upon the first failure)
# *  || export NHC_CHECK_ALL=1

# If necessary, additional directories may be added to PATH
# *  || export PATH="/opt/example/bin:$PATH"


#######################################################################
###
### CPU & Memory Hardware checks
###

# Set these to your correct CPU socket, core, and thread counts
 *  || check_hw_cpuinfo 2 28 28

# Compares the accumulated CPU time (in seconds) between kswapd kernel threads
# to make sure there's no imbalance among different NUMA nodes (which could be
# an early symptom of failure).
#
# Max 500 CPU hours; 100x discrepancy limit
 *  || check_ps_kswapd 1800000 100 log syslog

# Check that the correct amount of memory is present (with a fudge factor)
 *  || check_hw_physmem 256GB 256GB 2%

# Check that at least 1MB of physical memory is free
 *  || check_hw_physmem_free 1MB

# If less than 100MB of Memory+SWAP is free, things will die soon
 *  || check_hw_mem_free 100MB

# Make sure swap is present (without being too picky on the capacity)
 *  || check_hw_swap 2G 1TB

# If less than 1GB of SWAP is free, things will be moving slowly!
 *  || check_hw_swap_free 1GB

# Make sure the memory is running at the correct frequency / bus rate
 *  || check_dmi_data_match -t "Memory Device" "*Speed: 2400 MHz"

# Check for MCEs (memory warnings and errors)
 *  || check_hw_mcelog

# Ensure nodes are not overloaded. The rule of thumb is that load should remain
# below 2-times the number of CPU cores, but we'll allow for short bursts. The
# 1-minute load can be up 4xCoreCount; 5-minute load must be below 2xCoreCount:
 *  || check_ps_loadavg $((4*$HW_CORES)) $((2*$HW_CORES))


#######################################################################
###
### Network checks
###

# Check that there's an active ethernet interface named "eth0"
 *  || check_hw_eth eth0

# Check for an IB interface that shows LinkUp (with the specified datarate)
 *  || check_hw_ib 56


#######################################################################
###
### Filesystem checks
###

# Filesystems which should be mounted (simply check for their presence)
 *  || check_fs_mount_rw -f /
 *  || check_fs_mount_rw -f /tmp
 *  || check_fs_mount_rw -f /home
 *  || check_fs_mount_rw /dev/pts '/(none|devpts)/' devpts

#
# Check for modest amounts of free space in the important places.
# Free inodes are also important.
#
# Only check local filesystems in this file! Checking network filesystems
# can hang badly, so such things must be checked via this file:
#
#   /etc/nhc/compute-node-checks_blocking-io.conf
#

 *  || export DF_FLAGS="-Tkal"
 *  || export DFI_FLAGS="-Tkal"

 *  || check_fs_free / 3%
 *  || check_fs_ifree / 1k

 *  || check_fs_free /tmp 3%
 *  || check_fs_ifree /tmp 1k

 *  || check_fs_free /var 3%
 *  || check_fs_ifree /var 1k

 *  || check_fs_free /var/tmp 3%
 *  || check_fs_ifree /var/tmp 1k

 *  || check_fs_free /var/log 3%
 *  || check_fs_ifree /var/log 1k


#######################################################################
###
### File/metadata checks
###

# These should always be directories and always be read/write/execute and sticky.
 *  || check_file_test -r -w -x -d -k /tmp /var/tmp

# Assert common properties for devices which occasionally get clobbered
 *  || check_file_test -c -r -w /dev/null /dev/zero
 *  || check_file_stat -m 0666 -u 0 -g 0 -t 1 -T 3 /dev/null

# These should always be readable and should never be empty.
 *  || check_file_test -r -s /etc/passwd /etc/group

# Validate a couple important accounts in the passwd and group files
 *  || check_file_contents /etc/passwd "/^root:x:0:0:/" "sshd:*"
 *  || check_file_contents /etc/group "/^root:x:0:/"

# Make sure there's relatively recent (~2 hours) activity from the syslog
 *  || check_file_stat -n 7200 /var/log/messages


#######################################################################
###
### Process checks
###

# Ensure the SSH daemon is running (and start it if not)
 *  || check_ps_service -u root -S sshd

# Processes which should be running (restart them, if necessary)
 *  || check_ps_service -u root     -r crond
 *  || check_ps_service -u ganglia  -r gmond
 *  || check_ps_service -u root     -r ipmiseld
 *  || check_ps_service -u root     -r filebeat
 *  || check_ps_service -u root     -r mcelog
 *  || check_ps_service -u ntp      -r ntpd

# SLURM Resource Manager / Batch Scheduler Processes
 *  || check_ps_service -u munge    -r munged
 *  || check_ps_service -u root     -r slurmd

# TORQUE Resource Manager / Batch Scheduler Processes
# *  || check_ps_service -u root     -r trqauthd
# *  || check_ps_service -u root     -r pbs_mom

# Most systems also need NFS locking services.
# *  || check_ps_service -d rpc.statd -r nfslock

# The audit daemon can sometimes disappear if things get hairy.
# *  || check_ps_service -r auditd

# This is only valid for RHEL6 and similar/newer systems.
# *  || check_ps_service -d rsyslogd -r rsyslog

# In the case of MySQL, it's typically better to cycle.
# *  || check_ps_service -c mysqld

# If desired, watch for users manually running commands and log them.
# *  || check_ps_unauth_users log syslog

# If desired, make sure no users are SSH'd in, but don't kill them.
# *  || check_ps_blacklist sshd '!root'


#######################################################################
###
### GPU checks
###

# This is a fast-running, less-intense run of the GPU health test
 *  || NVIDIA_HEALTHMON_ARGS="-v"
 *  || check_nv_healthmon

